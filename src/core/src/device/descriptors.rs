//! HID descriptors for G29 and descriptor parsing utilities

/// Logitech G29 HID Report Descriptor (160 bytes)
/// This is the complete descriptor extracted from a real G29 device
pub const G29_HID_DESCRIPTOR: &[u8] = &[
    0x05, 0x01,        // Usage Page (Generic Desktop Ctrls)
    0x09, 0x04,        // Usage (Joystick)
    0xA1, 0x01,        // Collection (Application)
    0x85, 0x01,        //   Report ID (1)
    0x09, 0x39,        //   Usage (Hat switch)
    0x15, 0x00,        //   Logical Minimum (0)
    0x25, 0x07,        //   Logical Maximum (7)
    0x35, 0x00,        //   Physical Minimum (0)
    0x46, 0x3B, 0x01,  //   Physical Maximum (315)
    0x65, 0x14,        //   Unit (System: English Rotation, Length: Centimeter)
    0x75, 0x04,        //   Report Size (4)
    0x95, 0x01,        //   Report Count (1)
    0x81, 0x42,        //   Input (Data,Var,Abs,No Wrap,Linear,Preferred State,Null State)
    0x65, 0x00,        //   Unit (None)
    0x05, 0x09,        //   Usage Page (Button)
    0x19, 0x01,        //   Usage Minimum (0x01)
    0x29, 0x18,        //   Usage Maximum (0x18)
    0x15, 0x00,        //   Logical Minimum (0)
    0x25, 0x01,        //   Logical Maximum (1)
    0x75, 0x01,        //   Report Size (1)
    0x95, 0x18,        //   Report Count (24)
    0x81, 0x02,        //   Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
    0x05, 0x01,        //   Usage Page (Generic Desktop Ctrls)
    0x09, 0x30,        //   Usage (X)
    0x09, 0x31,        //   Usage (Y)
    0x09, 0x32,        //   Usage (Z)
    0x09, 0x35,        //   Usage (Rz)
    0x15, 0x00,        //   Logical Minimum (0)
    0x26, 0xFF, 0x03,  //   Logical Maximum (1023)
    0x75, 0x0A,        //   Report Size (10)
    0x95, 0x04,        //   Report Count (4)
    0x81, 0x02,        //   Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
    0x09, 0x39,        //   Usage (Hat switch)
    0x15, 0x00,        //   Logical Minimum (0)
    0x25, 0x07,        //   Logical Maximum (7)
    0x35, 0x00,        //   Physical Minimum (0)
    0x46, 0x3B, 0x01,  //   Physical Maximum (315)
    0x65, 0x14,        //   Unit (System: English Rotation, Length: Centimeter)
    0x75, 0x04,        //   Report Size (4)
    0x95, 0x01,        //   Report Count (1)
    0x81, 0x42,        //   Input (Data,Var,Abs,No Wrap,Linear,Preferred State,Null State)
    0x65, 0x00,        //   Unit (None)
    0x05, 0x0F,        //   Usage Page (PID Page)
    0x09, 0x92,        //   Usage (PID State Report)
    0xA1, 0x02,        //   Collection (Logical)
    0x85, 0x02,        //     Report ID (2)
    0x09, 0x9F,        //     Usage (Device Paused)
    0x09, 0xA0,        //     Usage (Actuators Enabled)
    0x09, 0xA4,        //     Usage (Safety Switch)
    0x09, 0xA5,        //     Usage (Actuator Override Switch)
    0x09, 0xA6,        //     Usage (Actuator Power)
    0x15, 0x00,        //     Logical Minimum (0)
    0x25, 0x01,        //     Logical Maximum (1)
    0x75, 0x01,        //     Report Size (1)
    0x95, 0x05,        //     Report Count (5)
    0x81, 0x02,        //     Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
    0x95, 0x03,        //     Report Count (3)
    0x81, 0x03,        //     Input (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
    0x09, 0x94,        //     Usage (Effect Playing)
    0x15, 0x00,        //     Logical Minimum (0)
    0x25, 0x01,        //     Logical Maximum (1)
    0x75, 0x01,        //     Report Size (1)
    0x95, 0x01,        //     Report Count (1)
    0x81, 0x02,        //     Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
    0x09, 0x22,        //     Usage (Effect Block Index)
    0x15, 0x01,        //     Logical Minimum (1)
    0x25, 0x28,        //     Logical Maximum (40)
    0x75, 0x07,        //     Report Size (7)
    0x95, 0x01,        //     Report Count (1)
    0x81, 0x02,        //     Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
    0xC0,              //   End Collection
    0x09, 0x21,        //   Usage (Set Effect Report)
    0xA1, 0x02,        //   Collection (Logical)
    0x85, 0x01,        //     Report ID (1)
    0x09, 0x22,        //     Usage (Effect Block Index)
    0x15, 0x01,        //     Logical Minimum (1)
    0x25, 0x28,        //     Logical Maximum (40)
    0x75, 0x08,        //     Report Size (8)
    0x95, 0x01,        //     Report Count (1)
    0x91, 0x02,        //     Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
    0x09, 0x25,        //     Usage (Effect Type)
    0xA1, 0x02,        //     Collection (Logical)
    0x09, 0x26,        //       Usage (ET Constant Force)
    0x09, 0x27,        //       Usage (ET Ramp)
    0x09, 0x30,        //       Usage (ET Square)
    0x09, 0x31,        //       Usage (ET Sine)
    0x09, 0x32,        //       Usage (ET Triangle)
    0x09, 0x33,        //       Usage (ET Sawtooth Up)
    0x09, 0x34,        //       Usage (ET Sawtooth Down)
    0x09, 0x40,        //       Usage (ET Spring)
    0x09, 0x41,        //       Usage (ET Damper)
    0x09, 0x42,        //       Usage (ET Inertia)
    0x09, 0x43,        //       Usage (ET Friction)
    0x25, 0x0B,        //       Logical Maximum (11)
    0x15, 0x01,        //       Logical Minimum (1)
    0x35, 0x01,        //       Physical Minimum (1)
    0x45, 0x0B,        //       Physical Maximum (11)
    0x75, 0x08,        //       Report Size (8)
    0x95, 0x01,        //       Report Count (1)
    0x91, 0x00,        //       Output (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
    0xC0,              //     End Collection
    0x09, 0x50,        //     Usage (Duration)
    0x09, 0x54,        //     Usage (Trigger Repeat Interval)
    0x09, 0x51,        //     Usage (Sample Period)
    0x15, 0x00,        //     Logical Minimum (0)
    0x26, 0xFF, 0x7F,  //     Logical Maximum (32767)
    0x35, 0x00,        //     Physical Minimum (0)
    0x46, 0xFF, 0x7F,  //     Physical Maximum (32767)
    0x66, 0x03, 0x10,  //     Unit (System: English Linear, Time: Seconds)
    0x55, 0xFD,        //     Unit Exponent (-3)
    0x75, 0x10,        //     Report Size (16)
    0x95, 0x03,        //     Report Count (3)
    0x91, 0x02,        //     Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
    0x55, 0x00,        //     Unit Exponent (0)
    0x66, 0x00, 0x00,  //     Unit (None)
    0x09, 0x52,        //     Usage (Gain)
    0x15, 0x00,        //     Logical Minimum (0)
    0x26, 0xFF, 0x00,  //     Logical Maximum (255)
    0x35, 0x00,        //     Physical Minimum (0)
    0x46, 0x10, 0x27,  //     Physical Maximum (10000)
    0x75, 0x08,        //     Report Size (8)
    0x95, 0x01,        //     Report Count (1)
    0x91, 0x02,        //     Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
    0x09, 0x53,        //     Usage (Trigger Button)
    0x15, 0x01,        //     Logical Minimum (1)
    0x25, 0x08,        //     Logical Maximum (8)
    0x35, 0x01,        //     Physical Minimum (1)
    0x45, 0x08,        //     Physical Maximum (8)
    0x75, 0x08,        //     Report Size (8)
    0x95, 0x01,        //     Report Count (1)
    0x91, 0x02,        //     Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
    0x09, 0x55,        //     Usage (Axes Enable)
    0xA1, 0x02,        //     Collection (Logical)
    0x05, 0x01,        //       Usage Page (Generic Desktop Ctrls)
    0x09, 0x30,        //       Usage (X)
    0x09, 0x31,        //       Usage (Y)
    0x15, 0x00,        //       Logical Minimum (0)
    0x25, 0x01,        //       Logical Maximum (1)
    0x75, 0x01,        //       Report Size (1)
    0x95, 0x02,        //       Report Count (2)
    0x91, 0x02,        //       Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
    0xC0,              //     End Collection
    0x05, 0x0F,        //     Usage Page (PID Page)
    0x09, 0x56,        //     Usage (Direction Enable)
    0x95, 0x01,        //     Report Count (1)
    0x91, 0x02,        //     Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
    0x95, 0x05,        //     Report Count (5)
    0x91, 0x03,        //     Output (Const,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
    0x09, 0x57,        //     Usage (Direction)
    0xA1, 0x02,        //     Collection (Logical)
    0x0B, 0x01, 0x00, 0x0A, 0x00,  //       Usage (0x0A0001)
    0x0B, 0x02, 0x00, 0x0A, 0x00,  //       Usage (0x0A0002)
    0x66, 0x14, 0x00,  //       Unit (System: English Rotation, Length: Centimeter)
    0x55, 0xFE,        //       Unit Exponent (-2)
    0x15, 0x00,        //       Logical Minimum (0)
    0x26, 0xFF, 0x00,  //       Logical Maximum (255)
    0x35, 0x00,        //       Physical Minimum (0)
    0x47, 0xA0, 0x8C, 0x00, 0x00,  //       Physical Maximum (36000)
    0x66, 0x00, 0x00,  //       Unit (None)
    0x75, 0x08,        //       Report Size (8)
    0x95, 0x02,        //       Report Count (2)
    0x91, 0x02,        //       Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
    0x55, 0x00,        //       Unit Exponent (0)
    0x66, 0x00, 0x00,  //       Unit (None)
    0xC0,              //     End Collection
    0x05, 0x0F,        //     Usage Page (PID Page)
    0x09, 0x58,        //     Usage (Type Specific Block Offset)
    0xA1, 0x02,        //     Collection (Logical)
    0x0B, 0x01, 0x00, 0x0A, 0x00,  //       Usage (0x0A0001)
    0x0B, 0x02, 0x00, 0x0A, 0x00,  //       Usage (0x0A0002)
    0x15, 0x80,        //       Logical Minimum (-128)
    0x25, 0x7F,        //       Logical Maximum (127)
    0x36, 0xF0, 0xD8,  //       Physical Minimum (-10000)
    0x46, 0x10, 0x27,  //       Physical Maximum (10000)
    0x75, 0x08,        //       Report Size (8)
    0x95, 0x02,        //       Report Count (2)
    0x91, 0x02,        //       Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
    0xC0,              //     End Collection
    0xC0,              //   End Collection
    0xC0,              // End Collection
];

/// Parse HID descriptor and extract key information
pub fn parse_hid_descriptor(descriptor: &[u8]) -> Result<HidDescriptorInfo, crate::error::TranslatorError> {
    // Basic validation
    if descriptor.is_empty() {
        return Err(crate::error::TranslatorError::invalid_report("Empty HID descriptor"));
    }
    
    // For now, return static info for G29 descriptor
    // In a full implementation, this would parse the descriptor bytes
    Ok(HidDescriptorInfo {
        report_ids: vec![0x01, 0x02],
        input_report_size: 28,   // G29 input report size
        output_report_size: 15,  // G29 output report size
        has_ffb: true,
        button_count: 24,
        axis_count: 4,
    })
}

#[derive(Debug, Clone)]
pub struct HidDescriptorInfo {
    pub report_ids: Vec<u8>,
    pub input_report_size: usize,
    pub output_report_size: usize,
    pub has_ffb: bool,
    pub button_count: u8,
    pub axis_count: u8,
} 